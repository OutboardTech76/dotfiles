# Configuration for Alacritty, the GPU enhanced terminal emulator

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty it self.
# env:
  # TERM env customization.
  #
  # If this property is not set, alacritty will set it to xterm-256color.
  #
  # Note that some xterm terminfo databases don't declare support for italics.
  # You can verify this by checking for the presence of `smso` and `sitm` in
  # `infocmp xterm-256color`.
  # TERM: xterm-256color-italic

#window:
  ## Window dimensions (changes require restart)
  ##
  ## Specified in number of columns/lines, not pixels. If both are zero this
  ## setting is ignored.
  #dimensions:
    #columns: 100
    #lines: 85

  ## Window padding (changes require restart)
  ##
  ## Blank space added around the window in pixels. This padding is not scaled by
  ## DPI and the specified value is always added at both opposing sides.
  #padding:
    #x: 0
    #y: 0

  ## Spread additional padding evenly around the terminal content.
  #dynamic_padding: false

  ## Window decorations
  ##
  ## Available values:
  ## - full: borders and title bar
  ## - none: neither borders nor title bar
  ## - transparent: title bar, transparent background and title bar buttons
  ## - buttonless: title bar, transparent background, but no title bar buttons
  #decorations: buttonless

  ## Startup Mode (changes require restart)
  ##
  ## Values for `startup_mode`:
  ##   - Windowed
  ##   - Maximized
  ##   - Fullscreen
  ##
  ## Values for `startup_mode` (macOS only):
  ##   - SimpleFullscreen
  #startup_mode: Windowed

  ## Background opacity
  #opacity: 1.0

#scrolling:
  ## maximum number of lines in the scrollback buffer. Specifying '0' will
  ## disable scrolling.
  #history: 0

  ## Number of lines the viewport will move for every line scrolled when
  ## scrollback is enabled (history > 0).
  #multiplier: 3

## Font configuration (changes require restart)
font:
  # The normal (roman) font face to use.
  # Style can be specified to pick a specific face.
  normal:
    family: MesloLGS NF
    style: Regular

  # The bold font face
  bold:
    family: MesloLGS NF
    style: Bold

  # The italic font face
  italic:
    family: MesloLGS NF
    style: Italic

  bold_italic:
    family: MesloLGS NF
    #family: MesloLGS NF
    style: Bold Italic
       
  # Point size of the font
  size: 9.5

  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increase the x offset to move the glyph to
  # the right, increase the y offset to move the glyph upward.
  glyph_offset:
    x: 0
    y: 0

  # Thin stroke font rendering (macOS only)
  #
  # Thin strokes are suitable for retina displays, but for non-retina you
  # probably want this set to false.
  #
  # macOS >= 10.14.x:
  #
  # If the font quality on non-retina display looks bad then set
  # `use_thin_strokes` to `true` and enable font smoothing by running the
  # following command:
  #   `defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO`
  #
  # This is a global setting and will require a log out or restart to take
  # effect.
  use_thin_strokes: false

# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: true

# Use custom cursor colors. If true, display the cursor in the cursor.foreground
# and cursor.background colors, otherwise invert the colors of the cursor.
custom_cursor_colors: true

###############################
#     Start color schemes     #
###############################

schemes:
  OneDark: &OneDark
    primary:
      background: '#282c34'
      foreground: '#e5e9f0'
    # Colors the cursor will use if `custom_cursor_colors` is true
    cursor:
      text: '#abb2bf'
      cursor: '0x4d4d4c'
    selection:
      text: CellForeground
      background: '#3e4451'
    normal:
      black:   '#000000'
      red:     '#e06c75'
      green:   '#98c379'
      yellow:  '#d19a66'
      blue:    '#61afef'
      magenta: '#c678dd'
      cyan:    '#56b6c2'
      white:   '#abb2bf'
    # Bright colors
    bright:
      black:   '#5c6370'
      red:     '#e06c75'
      green:   '#98c379'
      yellow:  '#d19a66'
      blue:    '#61afef'
      magenta: '#c678dd'
      cyan:    '#56b6c2'
      white:   '#fffefe'

  DoomOne: &DoomOne
    primary:
      background: '#282c34'
      foreground: '#bbc2cf'
    cursor:
      text: CellBackground
      cursor: '#528bff'
    selection:
      text: CellForeground
      background: '#3e4451'
    normal:
      black:   '#1c1f24'
      red:     '#ff6c6b'
      green:   '#98be65'
      yellow:  '#da8548'
      blue:    '#51afef'
      magenta: '#c678dd'
      cyan:    '#5699af'
      white:   '#202328'
    bright:
      black:   '#5b6268'
      red:     '#da8548'
      green:   '#4db5bd'
      yellow:  '#ecbe7b'
      blue:    '#3071db'   # This is 2257a0 in Doom Emacs but I lightened it.
      magenta: '#a9a1e1'
      cyan:    '#46d9ff'
      white:   '#dfdfdf'

colors: *OneDark

#############################
#     End color schemes     #
#############################


#############################
#     Start keybindings     #
#############################

# Key bindings
#
# Key bindings are specified as a list of objects. Each binding will specify a
# key and modifiers required to trigger it, terminal modes where the binding is
# applicable, and what should be done when the key binding fires. It can either
# send a byte sequence to the running application (`chars`), execute a
# predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Bindings are always filled by default, but will be replaced when a new binding
# with the same triggers is defined. To unset a default binding, it can be
# mapped to the `None` action.
#
# Example:
#   `- { key: V, mods: Control|Shift, action: Paste }`
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#
# Values for `mods`:
#   - Command
#   - Control
#   - Option
#   - Super
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ClearLogNotice
#   - SpawnNewInstance
#   - ToggleFullscreen
#   - None
#
# Values for `action` (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
#
#   Example:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad
#
key_bindings:
  - { key: V,      mods: Control|Shift, action: Paste                              }
  - { key: C,      mods: Control|Shift, action: Copy                               }
  - { key: Home,                        chars: "\x1bOH",         mode: AppCursor   }
  - { key: Home,                        chars: "\x1b[H",         mode: ~AppCursor  }
  - { key: End,                         chars: "\x1bOF",         mode: AppCursor   }
  - { key: End,                         chars: "\x1b[F",         mode: ~AppCursor  }
  - { key: Equals, mods: Control,       action: IncreaseFontSize                   }
  - { key: Minus,  mods: Control,       action: DecreaseFontSize                   }      
  - { key: Minus,  mods: Control|Alt,   action: ResetFontSize                      }
  - { key: PageUp,    mods: None,          action: ScrollPageUp,   mode: ~Alt  }
  - { key: PageDown,  mods: None,          action: ScrollPageDown, mode: ~Alt  }
  - { key: Home,      mods: Shift,         action: ScrollToTop,    mode: ~Alt  }
  - { key: End,    mods: Shift,         action: ScrollToBottom,  mode: ~Alt        }

    ## shortcuts for tmux. the leader key is control-b (0x02)
  #- { key: W,        mods: Command,       chars: "\x02&"                       }  # close tab (kill)
  #- { key: T,        mods: Command,       chars: "\x02c"                       }  # new tab
  #- { key: RBracket, mods: Command|Shift, chars: "\x02n"                       }  # select next tab
  #- { key: LBracket, mods: Command|Shift, chars: "\x02p"                       }  # select previous tab
  #- { key: RBracket, mods: Command,       chars: "\x02o"                       }  # select next pane
  #- { key: LBracket, mods: Command,       chars: "\x02;"                       }  # select last (previously used) pane
  #- { key: F,        mods: Command,       chars: "\x02/"                       }  # search (upwards) (see tmux.conf)

###########################
#     End keybindings     #
###########################

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: true

  # URL launcher
  # url:
    # This program is executed when clicking on a text which is recognized as a URL.
    # The URL is always added to the command as the last parameter.
    #
    # When set to `None`, URL launching will be disabled completely.
    #
    # Default:
    #   - (macOS) open
    #   - (Linux) xdg-open
    #   - (Windows) explorer
    # launcher:
    #   program: xdg-open
    #   args: []

    # These are the modifiers that need to be held down for opening URLs when clicking
    # on them. The available modifiers are documented in the key binding section.
    # modifiers: Control|Shift

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>"
  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: false
# Mouse bindings
#
# Available fields:
# - mouse
# - action
# - mods (optional)
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# All available `mods` and `action` values are documented in the key binding
# section.
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }
cursor:
  # Cursor style
  #
  # Values for 'style':
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Block
  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true
# dynamic_title: false
# Live config reload (changes require restart)
live_config_reload: true
#debug:
  ## Should display the render timer
  #render_timer: false
  ## Keep the log file after quitting Alacritty.
  #persistent_logging: false
  ## Log level
  ##
  ## Values for `log_level`:
  ##   - OFF
  ##   - ERROR
  ##   - WARN
  ##   - INFO
  ##   - DEBUG
  ##   - TRACE
  #log_level: OFF
  ## Print all received window events.
  #print_events: false
  ## Record all characters and escape sequences as test data.
  #ref_test: false
## Shell
##
## You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
## Entries in shell.args are passed unmodified as arguments to the shell.
#shell:
  #program: /usr/local/bin/zsh
  #args:
    #- --command=tmux
# vim: ft=dosini cms=#%s
